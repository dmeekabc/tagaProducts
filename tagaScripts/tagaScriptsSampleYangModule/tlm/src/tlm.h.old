
#ifndef _H_tlm
#define _H_tlm
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2016, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk -2016-10-25.11.37

    Combined SIL header
    module tlm
    revision 2016-11-12
    namespace http://iboa.us/ns/tlm
    organization IBOA Corp
    Created: 2016-11-13T05:46:18Z
    CLI parameters:
        format h
        indent 4
        module tlm
        output tlm.h
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_tlm_M_tlm (const xmlChar *)"tlm"

#define y_tlm_R_tlm (const xmlChar *)"2016-11-12"

#define y_tlm_I_tlm_type (const xmlChar *)"tlm-type"
#define y_tlm_I_tlm_type_log (const xmlChar *)"tlm-type-log"
#define y_tlm_I_tlm_type_dat (const xmlChar *)"tlm-type-dat"
#define y_tlm_I_tlm_type_out (const xmlChar *)"tlm-type-out"
#define y_tlm_I_tlm_type_txt (const xmlChar *)"tlm-type-txt"
#define y_tlm_I_tlm_type1 (const xmlChar *)"tlm-type1"
#define y_tlm_I_tlm_type2 (const xmlChar *)"tlm-type2"
#define y_tlm_I_tlm_type3 (const xmlChar *)"tlm-type3"
#define y_tlm_I_tlm_type4 (const xmlChar *)"tlm-type4"
#define y_tlm_I_tlm_test_type (const xmlChar *)"tlm-test-type"
#define y_tlm_I_udp_unicast (const xmlChar *)"udp-unicast"
#define y_tlm_I_udp_multicast (const xmlChar *)"udp-multicast"
#define y_tlm_I_tcp_unicast (const xmlChar *)"tcp-unicast"
#define y_tlm_I_simulation_only (const xmlChar *)"simulation-only"

#define y_tlm_N_maxDuration (const xmlChar *)"maxDuration"
#define y_tlm_N_maxLogDurationMinutes (const xmlChar *)"maxLogDurationMinutes"
#define y_tlm_N_run_tlm (const xmlChar *)"run-tlm"
#define y_tlm_N_stop_tlm (const xmlChar *)"stop-tlm"
#define y_tlm_N_tlm (const xmlChar *)"tlm"
#define y_tlm_N_tlmLevel (const xmlChar *)"tlmLevel"
#define y_tlm_N_tlmOperational (const xmlChar *)"tlmOperational"
#define y_tlm_N_tlmPurgeMode (const xmlChar *)"tlmPurgeMode"
#define y_tlm_N_tlmService (const xmlChar *)"tlmService"
#define y_tlm_N_tlmServiceEnabled (const xmlChar *)"tlmServiceEnabled"
#define y_tlm_N_tlmServiceStatus (const xmlChar *)"tlmServiceStatus"
#define y_tlm_N_tlmServiceVersionNumber (const xmlChar *)"tlmServiceVersionNumber"
#define y_tlm_N_tlmStatus (const xmlChar *)"tlmStatus"
#define y_tlm_N_tlmTestType (const xmlChar *)"tlmTestType"


/* container /tlm */
typedef struct y_tlm_T_tlm_ {
    xmlChar *tlmPurgeMode;
    boolean tlmServiceEnabled;
    uint32 maxLogDurationMinutes;
    uint32 maxDuration;
    xmlChar *tlmService;
    xmlChar *tlmServiceVersionNumber;
    xmlChar *tlmServiceStatus;
} y_tlm_T_tlm;

/* container /run-tlm/input */
typedef struct y_tlm_T_run_tlm_input_ {
    uint32 tlmLevel;
    val_idref_t *tlmTestType;
} y_tlm_T_run_tlm_input;

/* container /run-tlm/output */
typedef struct y_tlm_T_run_tlm_output_ {
} y_tlm_T_run_tlm_output;

/* rpc /run-tlm */
typedef struct y_tlm_T_run_tlm_ {
    y_tlm_T_run_tlm_input input;
    y_tlm_T_run_tlm_output output;
} y_tlm_T_run_tlm;

/* container /stop-tlm/input */
typedef struct y_tlm_T_stop_tlm_input_ {
} y_tlm_T_stop_tlm_input;

/* container /stop-tlm/output */
typedef struct y_tlm_T_stop_tlm_output_ {
} y_tlm_T_stop_tlm_output;

/* rpc /stop-tlm */
typedef struct y_tlm_T_stop_tlm_ {
    y_tlm_T_stop_tlm_input input;
    y_tlm_T_stop_tlm_output output;
} y_tlm_T_stop_tlm;

/* notification /tlmOperational */
typedef struct y_tlm_T_tlmOperational_ {
    xmlChar *tlmStatus;
} y_tlm_T_tlmOperational;


/********************************************************************
* FUNCTION y_tlm_tlmOperational_send
* 
* Send a y_tlm_tlmOperational notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void y_tlm_tlmOperational_send (
    const xmlChar *tlmStatus);

/********************************************************************
* FUNCTION y_tlm_init
* 
* initialize the tlm server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_tlm_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_tlm_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_tlm_init2 (void);

/********************************************************************
* FUNCTION y_tlm_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_tlm_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif