
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2016, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk -2016-10-25.11.37

    Combined SIL module
    module tlm
    revision 2016-11-12
    namespace http://iboa.us/ns/tlm
    organization IBOA Corp
    Created: 2016-11-13T05:46:18Z
    CLI parameters:
        format c
        indent 4
        module tlm
        output tlm.c
        unified true

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "agt_rpc.h"
#include "agt_sil_lib.h"
#include "agt_timer.h"
#include "agt_util.h"
#include "dlq.h"
#include "ncx.h"
#include "ncx_feature.h"
#include "ncxmod.h"
#include "ncxtypes.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "val_util.h"
#include "xml_util.h"
#include "tlm.h"

/* module static variables */
static ncx_module_t *tlm_mod;
static obj_template_t *tlm_obj;
static obj_template_t *run_tlm_obj;
static obj_template_t *stop_tlm_obj;
static obj_template_t *tlmOperational_obj;
static val_value_t *tlm_val;

/* put your static variables here */

/********************************************************************
* FUNCTION y_tlm_init_static_vars
* 
* initialize module static variables
* 
********************************************************************/
static void y_tlm_init_static_vars (void)
{
    tlm_mod = NULL;
    tlm_obj = NULL;
    run_tlm_obj = NULL;
    stop_tlm_obj = NULL;
    tlmOperational_obj = NULL;
    tlm_val = NULL;

    /* init your static variables here */

} /* y_tlm_init_static_vars */


/********************************************************************
* FUNCTION tlm_tlm_tlmPurgeMode_edit
* 
* Edit database object callback
* Path: /tlm/tlmPurgeMode
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_tlmPurgeMode_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval)
{
    status_t res = NO_ERR;
    val_value_t *errorval = (curval) ? curval : newval;
    const xmlChar *newval_val = (newval) ? VAL_ENUM_NAME(newval) : 0;
    const xmlChar *curval_val = (curval) ? VAL_ENUM_NAME(curval) : 0;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_tlmPurgeMode_edit callback for %s phase",
            agt_cbtype_name(cbtyp));
    }

    switch (cbtyp) {
    case AGT_CB_VALIDATE:
        /* description-stmt validation here */
        break;
    case AGT_CB_APPLY:
        /* database manipulation done here */
        break;
    case AGT_CB_COMMIT:
        /* device instrumentation done here */
        switch (editop) {
        case OP_EDITOP_LOAD:
            break;
        case OP_EDITOP_MERGE:
            break;
        case OP_EDITOP_REPLACE:
            break;
        case OP_EDITOP_CREATE:
            break;
        case OP_EDITOP_DELETE:
            break;
        default:
            res = SET_ERROR(ERR_INTERNAL_VAL);
        }
        break;
    case AGT_CB_ROLLBACK:
        /* undo device instrumentation here */
        break;
    default:
        res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_CONTENT,
            res,
            NULL,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* tlm_tlm_tlmPurgeMode_edit */


/********************************************************************
* FUNCTION tlm_tlm_tlmServiceEnabled_edit
* 
* Edit database object callback
* Path: /tlm/tlmServiceEnabled
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_tlmServiceEnabled_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval)
{
    status_t res = NO_ERR;
    val_value_t *errorval = (curval) ? curval : newval;
    boolean newval_val = (newval) ? VAL_BOOL(newval) : 0;
    boolean curval_val = (curval) ? VAL_BOOL(curval) : 0;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_tlmServiceEnabled_edit callback for %s phase",
            agt_cbtype_name(cbtyp));
    }

    switch (cbtyp) {
    case AGT_CB_VALIDATE:
        /* description-stmt validation here */
        break;
    case AGT_CB_APPLY:
        /* database manipulation done here */
        break;
    case AGT_CB_COMMIT:
        /* device instrumentation done here */
        switch (editop) {
        case OP_EDITOP_LOAD:
            break;
        case OP_EDITOP_MERGE:
            break;
        case OP_EDITOP_REPLACE:
            break;
        case OP_EDITOP_CREATE:
            break;
        case OP_EDITOP_DELETE:
            break;
        default:
            res = SET_ERROR(ERR_INTERNAL_VAL);
        }
        break;
    case AGT_CB_ROLLBACK:
        /* undo device instrumentation here */
        break;
    default:
        res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_CONTENT,
            res,
            NULL,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* tlm_tlm_tlmServiceEnabled_edit */


/********************************************************************
* FUNCTION tlm_tlm_maxLogDurationMinutes_edit
* 
* Edit database object callback
* Path: /tlm/maxLogDurationMinutes
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_maxLogDurationMinutes_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval)
{
    status_t res = NO_ERR;
    val_value_t *errorval = (curval) ? curval : newval;
    uint32 newval_val = (newval) ? VAL_UINT(newval) : 0;
    uint32 curval_val = (curval) ? VAL_UINT(curval) : 0;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_maxLogDurationMinutes_edit callback for %s phase",
            agt_cbtype_name(cbtyp));
    }

    switch (cbtyp) {
    case AGT_CB_VALIDATE:
        /* description-stmt validation here */
        break;
    case AGT_CB_APPLY:
        /* database manipulation done here */
        break;
    case AGT_CB_COMMIT:
        /* device instrumentation done here */
        switch (editop) {
        case OP_EDITOP_LOAD:
            break;
        case OP_EDITOP_MERGE:
            break;
        case OP_EDITOP_REPLACE:
            break;
        case OP_EDITOP_CREATE:
            break;
        case OP_EDITOP_DELETE:
            break;
        default:
            res = SET_ERROR(ERR_INTERNAL_VAL);
        }
        break;
    case AGT_CB_ROLLBACK:
        /* undo device instrumentation here */
        break;
    default:
        res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_CONTENT,
            res,
            NULL,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* tlm_tlm_maxLogDurationMinutes_edit */


/********************************************************************
* FUNCTION tlm_tlm_maxDuration_edit
* 
* Edit database object callback
* Path: /tlm/maxDuration
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_maxDuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval)
{
    status_t res = NO_ERR;
    val_value_t *errorval = (curval) ? curval : newval;
    uint32 newval_val = (newval) ? VAL_UINT(newval) : 0;
    uint32 curval_val = (curval) ? VAL_UINT(curval) : 0;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_maxDuration_edit callback for %s phase",
            agt_cbtype_name(cbtyp));
    }

    switch (cbtyp) {
    case AGT_CB_VALIDATE:
        /* description-stmt validation here */
        break;
    case AGT_CB_APPLY:
        /* database manipulation done here */
        break;
    case AGT_CB_COMMIT:
        /* device instrumentation done here */
        switch (editop) {
        case OP_EDITOP_LOAD:
            break;
        case OP_EDITOP_MERGE:
            break;
        case OP_EDITOP_REPLACE:
            break;
        case OP_EDITOP_CREATE:
            break;
        case OP_EDITOP_DELETE:
            break;
        default:
            res = SET_ERROR(ERR_INTERNAL_VAL);
        }
        break;
    case AGT_CB_ROLLBACK:
        /* undo device instrumentation here */
        break;
    default:
        res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_CONTENT,
            res,
            NULL,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* tlm_tlm_maxDuration_edit */

/********************************************************************
* FUNCTION tlm_tlm_tlmService_get
* 
* Get database object callback for leaf tlmService
* Path: /tlm/tlmService
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn_t)
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_tlmService_get (
    ses_cb_t *scb,
    getcb_mode_t cbmode,
    const val_value_t *virval,
    val_value_t *dstval)
{
    status_t res = NO_ERR;
    const xmlChar *tlmService;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_tlmService_get callback");
    }


    /* remove the next line if scb is used */
    (void)scb;

    /* remove the next line if virval is used */
    (void)virval;

    if (cbmode != GETCB_GET_VALUE) {
        return ERR_NCX_OPERATION_NOT_SUPPORTED;
    }

    /* set the tlmService var here, change EMPTY_STRING */
    tlmService = EMPTY_STRING;
    res = val_set_simval_obj(
        dstval,
        dstval->obj,
        tlmService);

    return res;

} /* tlm_tlm_tlmService_get */

/********************************************************************
* FUNCTION tlm_tlm_tlmServiceVersionNumber_get
* 
* Get database object callback for leaf tlmServiceVersionNumber
* Path: /tlm/tlmServiceVersionNumber
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn_t)
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_tlmServiceVersionNumber_get (
    ses_cb_t *scb,
    getcb_mode_t cbmode,
    const val_value_t *virval,
    val_value_t *dstval)
{
    status_t res = NO_ERR;
    const xmlChar *tlmServiceVersionNumber;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_tlmServiceVersionNumber_get callback");
    }


    /* remove the next line if scb is used */
    (void)scb;

    /* remove the next line if virval is used */
    (void)virval;

    if (cbmode != GETCB_GET_VALUE) {
        return ERR_NCX_OPERATION_NOT_SUPPORTED;
    }

    /* set the tlmServiceVersionNumber var here, change EMPTY_STRING */
    tlmServiceVersionNumber = EMPTY_STRING;
    res = val_set_simval_obj(
        dstval,
        dstval->obj,
        tlmServiceVersionNumber);

    return res;

} /* tlm_tlm_tlmServiceVersionNumber_get */

/********************************************************************
* FUNCTION tlm_tlm_tlmServiceStatus_get
* 
* Get database object callback for leaf tlmServiceStatus
* Path: /tlm/tlmServiceStatus
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn_t)
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_tlmServiceStatus_get (
    ses_cb_t *scb,
    getcb_mode_t cbmode,
    const val_value_t *virval,
    val_value_t *dstval)
{
    status_t res = NO_ERR;
    const xmlChar *tlmServiceStatus;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_tlmServiceStatus_get callback");
    }


    /* remove the next line if scb is used */
    (void)scb;

    /* remove the next line if virval is used */
    (void)virval;

    if (cbmode != GETCB_GET_VALUE) {
        return ERR_NCX_OPERATION_NOT_SUPPORTED;
    }

    /* set the tlmServiceStatus var here, change enum */
    tlmServiceStatus = (const xmlChar *)"enabled";
    res = val_set_simval_obj(
        dstval,
        dstval->obj,
        tlmServiceStatus);

    return res;

} /* tlm_tlm_tlmServiceStatus_get */

/********************************************************************
* FUNCTION tlm_tlm_mro
* 
* Make read-only child nodes
* Path: /tlm
* 
* INPUTS:
*     parentval == the parent struct to use for new child nodes
* 
* RETURNS:
*     error status
********************************************************************/
static status_t
    tlm_tlm_mro (val_value_t *parentval)
{
    status_t res = NO_ERR;
    val_value_t *childval = NULL;
    

    /* add /tlm/tlmService */
    childval = agt_make_virtual_leaf(
        parentval->obj,
        y_tlm_N_tlmService,
        tlm_tlm_tlmService_get,
        &res);
    if (childval != NULL) {
        val_add_child(childval, parentval);
    } else {
        return res;
    }

    /* add /tlm/tlmServiceVersionNumber */
    childval = agt_make_virtual_leaf(
        parentval->obj,
        y_tlm_N_tlmServiceVersionNumber,
        tlm_tlm_tlmServiceVersionNumber_get,
        &res);
    if (childval != NULL) {
        val_add_child(childval, parentval);
    } else {
        return res;
    }

    /* add /tlm/tlmServiceStatus */
    childval = agt_make_virtual_leaf(
        parentval->obj,
        y_tlm_N_tlmServiceStatus,
        tlm_tlm_tlmServiceStatus_get,
        &res);
    if (childval != NULL) {
        val_add_child(childval, parentval);
    } else {
        return res;
    }

    return res;

} /* tlm_tlm_mro */


/********************************************************************
* FUNCTION tlm_tlm_edit
* 
* Edit database object callback
* Path: /tlm
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t tlm_tlm_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval)
{
    status_t res = NO_ERR;
    val_value_t *errorval = (curval) ? curval : newval;

    if (LOGDEBUG) {
        log_debug("\nEnter tlm_tlm_edit callback for %s phase",
            agt_cbtype_name(cbtyp));
    }

    switch (cbtyp) {
    case AGT_CB_VALIDATE:
        /* description-stmt validation here */
        break;
    case AGT_CB_APPLY:
        /* database manipulation done here */
        break;
    case AGT_CB_COMMIT:
        /* device instrumentation done here */
        switch (editop) {
        case OP_EDITOP_LOAD:
            break;
        case OP_EDITOP_MERGE:
            break;
        case OP_EDITOP_REPLACE:
            break;
        case OP_EDITOP_CREATE:
            break;
        case OP_EDITOP_DELETE:
            break;
        default:
            res = SET_ERROR(ERR_INTERNAL_VAL);
        }

        if (res == NO_ERR) {
            res = agt_check_cache(&tlm_val, newval, curval, editop);
        }
        
        if ((res == NO_ERR) && (curval == NULL)) {
            res = tlm_tlm_mro(newval);
        }
        break;
    case AGT_CB_ROLLBACK:
        /* undo device instrumentation here */
        break;
    default:
        res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_CONTENT,
            res,
            NULL,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* tlm_tlm_edit */


/********************************************************************
* FUNCTION y_tlm_run_tlm_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t y_tlm_run_tlm_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode)
{
    status_t res = NO_ERR;
    val_value_t *errorval = NULL;

    if (LOGDEBUG) {
        log_debug("\nStart SIL validate rpc <run-tlm> from module tlm");
    }
    val_value_t *tlmLevel_val = NULL;
    uint32 tlmLevel;
    val_value_t *tlmTestType_val = NULL;
    const val_idref_t *tlmTestType;

    tlmLevel_val = val_find_child(
        msg->rpc_input,
        y_tlm_M_tlm,
        y_tlm_N_tlmLevel);
    if (tlmLevel_val != NULL && tlmLevel_val->res == NO_ERR) {
        tlmLevel = VAL_UINT(tlmLevel_val);
    }

    tlmTestType_val = val_find_child(
        msg->rpc_input,
        y_tlm_M_tlm,
        y_tlm_N_tlmTestType);
    if (tlmTestType_val != NULL && tlmTestType_val->res == NO_ERR) {
        tlmTestType = VAL_IDREF(tlmTestType_val);
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_OPERATION,
            res,
            methnode,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* y_tlm_run_tlm_validate */


/********************************************************************
* FUNCTION y_tlm_run_tlm_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t y_tlm_run_tlm_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode)
{
    status_t res = NO_ERR;

    if (LOGDEBUG) {
        log_debug("\nStart SIL invoke rpc <run-tlm> from module tlm");
    }
    val_value_t *tlmLevel_val = NULL;
    uint32 tlmLevel;
    val_value_t *tlmTestType_val = NULL;
    const val_idref_t *tlmTestType;

    tlmLevel_val = val_find_child(
        msg->rpc_input,
        y_tlm_M_tlm,
        y_tlm_N_tlmLevel);
    if (tlmLevel_val != NULL && tlmLevel_val->res == NO_ERR) {
        tlmLevel = VAL_UINT(tlmLevel_val);
    }

    tlmTestType_val = val_find_child(
        msg->rpc_input,
        y_tlm_M_tlm,
        y_tlm_N_tlmTestType);
    if (tlmTestType_val != NULL && tlmTestType_val->res == NO_ERR) {
        tlmTestType = VAL_IDREF(tlmTestType_val);
    }

    /* remove the next line if scb is used */
    (void)scb;

    /* remove the next line if methnode is used */
    (void)methnode;

    /* invoke your device instrumentation code here */
    
    return res;

} /* y_tlm_run_tlm_invoke */


/********************************************************************
* FUNCTION y_tlm_stop_tlm_validate
* 
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t y_tlm_stop_tlm_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode)
{
    status_t res = NO_ERR;
    val_value_t *errorval = NULL;

    if (LOGDEBUG) {
        log_debug("\nStart SIL validate rpc <stop-tlm> from module tlm");
    }

    if (res != NO_ERR) {
        agt_record_error(
            scb,
            &msg->mhdr,
            NCX_LAYER_OPERATION,
            res,
            methnode,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval,
            (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
            errorval);
    }
    return res;

} /* y_tlm_stop_tlm_validate */


/********************************************************************
* FUNCTION y_tlm_stop_tlm_invoke
* 
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
* 
* INPUTS:
*     see agt/agt_rpc.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t y_tlm_stop_tlm_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode)
{
    status_t res = NO_ERR;

    if (LOGDEBUG) {
        log_debug("\nStart SIL invoke rpc <stop-tlm> from module tlm");
    }

    /* remove the next line if scb is used */
    (void)scb;

    /* remove the next line if msg is used */
    (void)msg;

    /* remove the next line if methnode is used */
    (void)methnode;

    /* invoke your device instrumentation code here */
    
    return res;

} /* y_tlm_stop_tlm_invoke */


/********************************************************************
* FUNCTION y_tlm_tlmOperational_send
* 
* Send a y_tlm_tlmOperational notification
* Called by your code when notification event occurs
* 
********************************************************************/
void y_tlm_tlmOperational_send (
    const xmlChar *tlmStatus)
{
    val_value_t *parmval = NULL;
    status_t res = NO_ERR;

    if (!agt_notifications_enabled()) {
        log_debug2("\nSkipping <tlmOperational> notification; disabled");
        return;
    }
    
    if (LOGDEBUG) {
        log_debug("\nGenerating <tlmOperational> notification");
    }
    
    agt_not_msg_t *notif = agt_not_new_notification(tlmOperational_obj);
    if (notif == NULL) {
        log_error("\nError: malloc failed, cannot send "
        "<tlmOperational> notification");
        return;
    }
    
    /* add tlmStatus to payload */
    parmval = agt_make_leaf2(
        tlmOperational_obj,
        y_tlm_M_tlm,
        y_tlm_N_tlmStatus,
        tlmStatus,
        &res);
    if (parmval == NULL) {
        log_error(
            "\nError: make leaf failed (%s), cannot send "
            "<tlmOperational> notification",
            get_error_string(res));
    } else {
        agt_not_add_to_payload(notif, parmval);
    }
    
    agt_not_queue_notification(notif);
    
} /* y_tlm_tlmOperational_send */

/********************************************************************
* FUNCTION y_tlm_init
* 
* initialize the tlm server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
status_t y_tlm_init (
    const xmlChar *modname,
    const xmlChar *revision)
{
    status_t res = NO_ERR;

    y_tlm_init_static_vars();

    /* change if custom handling done */
    if (xml_strcmp(modname, y_tlm_M_tlm)) {
        return ERR_NCX_UNKNOWN_MODULE;
    }

    if (revision && xml_strcmp(revision, y_tlm_R_tlm)) {
        return ERR_NCX_WRONG_VERSION;
    }


    res = ncxmod_load_module(
        y_tlm_M_tlm,
        y_tlm_R_tlm,
        agt_get_savedevQ(),
        &tlm_mod);
    if (res != NO_ERR) {
        return res;
    }

    tlm_obj = ncx_find_object(
        tlm_mod,
        y_tlm_N_tlm);
    if (tlm_obj == NULL) {
        return ERR_NCX_DEF_NOT_FOUND;
    }

    run_tlm_obj = ncx_find_object(
        tlm_mod,
        y_tlm_N_run_tlm);
    if (run_tlm_obj == NULL) {
        return ERR_NCX_DEF_NOT_FOUND;
    }

    stop_tlm_obj = ncx_find_object(
        tlm_mod,
        y_tlm_N_stop_tlm);
    if (stop_tlm_obj == NULL) {
        return ERR_NCX_DEF_NOT_FOUND;
    }

    tlmOperational_obj = ncx_find_object(
        tlm_mod,
        y_tlm_N_tlmOperational);
    if (tlmOperational_obj == NULL) {
        return ERR_NCX_DEF_NOT_FOUND;
    }

    res = agt_rpc_register_method(
        y_tlm_M_tlm,
        y_tlm_N_run_tlm,
        AGT_RPC_PH_VALIDATE,
        y_tlm_run_tlm_validate);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_rpc_register_method(
        y_tlm_M_tlm,
        y_tlm_N_run_tlm,
        AGT_RPC_PH_INVOKE,
        y_tlm_run_tlm_invoke);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_rpc_register_method(
        y_tlm_M_tlm,
        y_tlm_N_stop_tlm,
        AGT_RPC_PH_VALIDATE,
        y_tlm_stop_tlm_validate);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_rpc_register_method(
        y_tlm_M_tlm,
        y_tlm_N_stop_tlm,
        AGT_RPC_PH_INVOKE,
        y_tlm_stop_tlm_invoke);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_cb_register_callback(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm",
        y_tlm_R_tlm,
        tlm_tlm_edit);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_cb_register_callback(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:tlmPurgeMode",
        y_tlm_R_tlm,
        tlm_tlm_tlmPurgeMode_edit);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_cb_register_callback(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:tlmServiceEnabled",
        y_tlm_R_tlm,
        tlm_tlm_tlmServiceEnabled_edit);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_cb_register_callback(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:maxLogDurationMinutes",
        y_tlm_R_tlm,
        tlm_tlm_maxLogDurationMinutes_edit);
    if (res != NO_ERR) {
        return res;
    }

    res = agt_cb_register_callback(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:maxDuration",
        y_tlm_R_tlm,
        tlm_tlm_maxDuration_edit);
    if (res != NO_ERR) {
        return res;
    }

    /* put your module initialization code here */

    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");
    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");
    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");
    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");
    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");
    log_debug("\ndlm aaaaaaaaaaaaaaaaaaaaaa tlm tlm tlm Init");

    // Okay, here is where we start the jtmnma daemon!
    //system("sudo /usr/bin/python /home/pi/scripts/taga/tagaScripts/tagaScriptsLogMgt/tlm.py &" );
    system("sudo /usr/bin/python /home/pi/GrovePi/Software/Python/tlm.py &" );

    log_debug("\ndlm bbbbbbbbbbbbbbbbbbbbb tlm tlm tlm Init");
    log_debug("\ndlm bbbbbbbbbbbbbbbbbbbbb tlm tlm tlm Init");
    log_debug("\ndlm bbbbbbbbbbbbbbbbbbbbb tlm tlm tlm Init");
    log_debug("\ndlm bbbbbbbbbbbbbbbbbbbbb tlm tlm tlm Init");
    log_debug("\ndlm bbbbbbbbbbbbbbbbbbbbb tlm tlm tlm Init");
    
    return res;
    
    return res;

} /* y_tlm_init */

/********************************************************************
* FUNCTION y_tlm_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
status_t y_tlm_init2 (void)
{
    status_t res = NO_ERR;

    tlm_val = agt_init_cache(
        y_tlm_M_tlm,
        y_tlm_N_tlm,
        &res);
    if (res != NO_ERR) {
        return res;
    }

    /* put your init2 code here */

    return res;
    
} /* y_tlm_init2 */

/********************************************************************
* FUNCTION y_tlm_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
void y_tlm_cleanup (void)
{

    agt_rpc_unregister_method(
        y_tlm_M_tlm,
        y_tlm_N_run_tlm);

    agt_rpc_unregister_method(
        y_tlm_M_tlm,
        y_tlm_N_stop_tlm);

    agt_cb_unregister_callbacks(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm");

    agt_cb_unregister_callbacks(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:tlmPurgeMode");

    agt_cb_unregister_callbacks(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:tlmServiceEnabled");

    agt_cb_unregister_callbacks(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:maxLogDurationMinutes");

    agt_cb_unregister_callbacks(
        y_tlm_M_tlm,
        (const xmlChar *)"/tlm:tlm/tlm:maxDuration");

    /* put your cleanup code here */
    
} /* y_tlm_cleanup */

/* END SIL tlm.c */
