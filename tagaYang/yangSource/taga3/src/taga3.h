
#ifndef _H_taga3
#define _H_taga3
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2016, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 16.10-3

    Combined SIL header
    module taga3
    revision 2017-01-22
    namespace http://iboa.us/ns/taga3
    organization IBOA Corp
    Created: 2017-02-11T00:39:02Z
    CLI parameters:
        format h
        indent 4
        module taga3
        output taga3.h
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_taga3_M_taga3 (const xmlChar *)"taga3"

#define y_taga3_R_taga3 (const xmlChar *)"2017-01-22"

#define y_taga3_I_taga3_blue (const xmlChar *)"taga3-blue"
#define y_taga3_I_taga3_green (const xmlChar *)"taga3-green"
#define y_taga3_I_taga3_red (const xmlChar *)"taga3-red"
#define y_taga3_I_taga3_orange (const xmlChar *)"taga3-orange"
#define y_taga3_I_taga3_yellow (const xmlChar *)"taga3-yellow"

#define y_taga3_N_set_blue_state (const xmlChar *)"set-blue-state"
#define y_taga3_N_set_green_state (const xmlChar *)"set-green-state"
#define y_taga3_N_set_orange_state (const xmlChar *)"set-orange-state"
#define y_taga3_N_set_red_state (const xmlChar *)"set-red-state"
#define y_taga3_N_set_yellow_state (const xmlChar *)"set-yellow-state"
#define y_taga3_N_stric_state_transitions (const xmlChar *)"stric-state-transitions"
#define y_taga3_N_taga3 (const xmlChar *)"taga3"
#define y_taga3_N_taga3_PrimaryState (const xmlChar *)"taga3-PrimaryState"
#define y_taga3_N_taga3_SecondaryState (const xmlChar *)"taga3-SecondaryState"
#define y_taga3_N_taga3_TertiaryState (const xmlChar *)"taga3-TertiaryState"
#define y_taga3_N_taga3_change (const xmlChar *)"taga3-change"
#define y_taga3_N_taga3_newState (const xmlChar *)"taga3-newState"


/* container /taga3 */
typedef struct y_taga3_T_taga3_ {
    xmlChar *taga3_PrimaryState;
    xmlChar *taga3_SecondaryState;
    xmlChar *taga3_TertiaryState;
    boolean stric_state_transitions;
} y_taga3_T_taga3;

/* container /set-blue-state/input */
typedef struct y_taga3_T_set_blue_state_input_ {
} y_taga3_T_set_blue_state_input;

/* container /set-blue-state/output */
typedef struct y_taga3_T_set_blue_state_output_ {
} y_taga3_T_set_blue_state_output;

/* rpc /set-blue-state */
typedef struct y_taga3_T_set_blue_state_ {
    y_taga3_T_set_blue_state_input input;
    y_taga3_T_set_blue_state_output output;
} y_taga3_T_set_blue_state;

/* container /set-green-state/input */
typedef struct y_taga3_T_set_green_state_input_ {
} y_taga3_T_set_green_state_input;

/* container /set-green-state/output */
typedef struct y_taga3_T_set_green_state_output_ {
} y_taga3_T_set_green_state_output;

/* rpc /set-green-state */
typedef struct y_taga3_T_set_green_state_ {
    y_taga3_T_set_green_state_input input;
    y_taga3_T_set_green_state_output output;
} y_taga3_T_set_green_state;

/* container /set-red-state/input */
typedef struct y_taga3_T_set_red_state_input_ {
} y_taga3_T_set_red_state_input;

/* container /set-red-state/output */
typedef struct y_taga3_T_set_red_state_output_ {
} y_taga3_T_set_red_state_output;

/* rpc /set-red-state */
typedef struct y_taga3_T_set_red_state_ {
    y_taga3_T_set_red_state_input input;
    y_taga3_T_set_red_state_output output;
} y_taga3_T_set_red_state;

/* container /set-orange-state/input */
typedef struct y_taga3_T_set_orange_state_input_ {
} y_taga3_T_set_orange_state_input;

/* container /set-orange-state/output */
typedef struct y_taga3_T_set_orange_state_output_ {
} y_taga3_T_set_orange_state_output;

/* rpc /set-orange-state */
typedef struct y_taga3_T_set_orange_state_ {
    y_taga3_T_set_orange_state_input input;
    y_taga3_T_set_orange_state_output output;
} y_taga3_T_set_orange_state;

/* container /set-yellow-state/input */
typedef struct y_taga3_T_set_yellow_state_input_ {
} y_taga3_T_set_yellow_state_input;

/* container /set-yellow-state/output */
typedef struct y_taga3_T_set_yellow_state_output_ {
} y_taga3_T_set_yellow_state_output;

/* rpc /set-yellow-state */
typedef struct y_taga3_T_set_yellow_state_ {
    y_taga3_T_set_yellow_state_input input;
    y_taga3_T_set_yellow_state_output output;
} y_taga3_T_set_yellow_state;

/* notification /taga3-change */
typedef struct y_taga3_T_taga3_change_ {
    xmlChar *taga3_newState;
} y_taga3_T_taga3_change;


/********************************************************************
* FUNCTION y_taga3_taga3_change_send
*
* Send a y_taga3_taga3_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void y_taga3_taga3_change_send (
    const xmlChar *taga3_newState);

/********************************************************************
* FUNCTION y_taga3_init
*
* initialize the taga3 server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_taga3_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_taga3_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_taga3_init2 (void);

/********************************************************************
* FUNCTION y_taga3_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_taga3_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif